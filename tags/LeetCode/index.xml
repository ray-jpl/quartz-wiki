<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LeetCode on</title><link>https://ray-jpl.github.io/quartz-wiki/tags/LeetCode/</link><description>Recent content in LeetCode on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ray-jpl.github.io/quartz-wiki/tags/LeetCode/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary Search Tree - In-Order Traversal</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Search-Tree-Inorder-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Search-Tree-Inorder-Traversal/</guid><description>Inorder search for a [[notes/Binary Search Tree]] searches nodes from lowest to highest.
As Binary search trees are ordered in a way that all nodes in the left subtree contain a lower value than the current node.</description></item><item><title>Binary Tree - Level Order Traversal</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Tree-Level-Order-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Tree-Level-Order-Traversal/</guid><description>Level Order Traversal is essentially storing the nodes of each level/depth of the [[notes/Binary Tree]].
This can be performed iteratively using a Queue datastructure.</description></item><item><title>Comparator - Java</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Comparator-Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Comparator-Java/</guid><description>Comparator A comparator interface is used to order objects of user-defined classes. If we needed to sort a class which contains fields such as name and ID number we may want to sort by either of these fields.</description></item><item><title>Topological Sort</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Topological-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Topological-Sort/</guid><description>Topological Sort The topological sort algorithm takes a directed graph and returns an array of the nodes where each node appears before all the nodes it points to.</description></item></channel></rss>