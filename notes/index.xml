<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://ray-jpl.github.io/quartz-wiki/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ray-jpl.github.io/quartz-wiki/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary Search Tree</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Search-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Search-Tree/</guid><description>Binary Search Trees(BST) are [[notes/Binary Tree]] that have a left subtree that only contains values smaller than the root node, the right subtree only contains values greater than the root node.</description></item><item><title>Binary Search Tree - In-Order Traversal</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Search-Tree-Inorder-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Search-Tree-Inorder-Traversal/</guid><description>Inorder search for a [[notes/Binary Search Tree]] searches nodes from lowest to highest.
As Binary search trees are ordered in a way that all nodes in the left subtree contain a lower value than the current node.</description></item><item><title>Binary Tree</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Tree/</guid><description>References</description></item><item><title>Binary Tree - Level Order Traversal</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Tree-Level-Order-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Binary-Tree-Level-Order-Traversal/</guid><description>Level Order Traversal is essentially storing the nodes of each level/depth of the [[notes/Binary Tree]].
This can be performed iteratively using a Queue datastructure.</description></item><item><title>Continuous Integration and Continuous Deployment</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Continuous-Integration-and-Continuous-Delivery-CICD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Continuous-Integration-and-Continuous-Delivery-CICD/</guid><description>CI/CD CI/CD automates much or all of the manual human intervention traditionally needed to get code from a commit into production.</description></item><item><title>Degree</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Degree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Degree/</guid><description>Degree The degree of a node is the number of edges connected to the node.
The maximum degree of a graph is the highest degree of all nodes.</description></item><item><title>Directory Information Tree</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Directory-Information-Tree-DIT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Directory-Information-Tree-DIT/</guid><description>LDAP directories are organized in a hierarchical tree structure, similar to the directory structure of a file system. This structure is also known as the Directory Information Tree (DIT).</description></item><item><title>Functional and Non-Functional Testing</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Functional-and-Non-Functional-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Functional-and-Non-Functional-Testing/</guid><description>Functional Testing Functional testing is the process of checking that the functional requirements and specifications are satisfied by the application. Simulates system usage by providing appropriate test input and expecting correct output.</description></item><item><title>Integration Testing</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Integration-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Integration-Testing/</guid><description>Integration Testing Integration testing is the second stage of the software testing process, following [[notes/Unit Testing|Unit Testing]]. Integration testing involves verifying that each individual software component can work together.</description></item><item><title>Kafka</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Kafka/</guid><description>Event Streaming &amp;ldquo;Event streaming is the practice of capturing data in real-time from event sources like databases, sensors, mobile devices, cloud services, and software applications in the form of streams of events; storing these event streams durably for later retrieval; manipulating, processing, and reacting to the event streams in real-time as well as retrospectively; and routing the event streams to different destination technologies as needed.</description></item><item><title>LDAP</title><link>https://ray-jpl.github.io/quartz-wiki/notes/LDAP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/LDAP/</guid><description>Lightweight Directory Access Protocol (LDAP) is a vendor-neutral protocol used for accessing and maintaining distributed directory information services. A directory service is like a database that stores information about network resources, such as users, computers, printers, and other devices.</description></item><item><title>Obsidian Notes</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Obsidian-Notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Obsidian-Notes/</guid><description>Setup To setup Obsidian Notes just install Obsidian and you can immediately start taking notes. There are many different ways to setup your Obsidian editor and many plugins to use in order to customise your experience.</description></item><item><title>Regression Testing</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Regression-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Regression-Testing/</guid><description>Regression Testing Regression testing refers to a testing technique that runs functional and non-functional tests to ensure that the functionality of existing features works as intended.</description></item><item><title>Topological Sort</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Topological-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Topological-Sort/</guid><description>Topological Sort The topological sort algorithm takes a directed graph and returns an array of the nodes where each node appears before all the nodes it points to.</description></item><item><title>Unit Testing</title><link>https://ray-jpl.github.io/quartz-wiki/notes/Unit-Testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ray-jpl.github.io/quartz-wiki/notes/Unit-Testing/</guid><description>Unit Testing Unit testing is a testing descrete behaviours of your program as individual units. The tests need to verify the standard, boundary and incorrect cases of input and also check any assumptions made by the code.</description></item></channel></rss>